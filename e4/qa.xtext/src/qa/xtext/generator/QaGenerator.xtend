/*
 * generated by Xtext
 *///
package qa.xtext.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IGenerator
import org.eclipse.xtext.generator.IFileSystemAccess
import tdt4250.qa.QATest
import tdt4250.qa.Question
import tdt4250.qa.QAPart
import tdt4250.qa.QASection
import tdt4250.qa.Answer
import tdt4250.qa.YesNoAnswer
import tdt4250.qa.TextAnswer
import tdt4250.qa.NumberAnswer
import tdt4250.qa.OptionAnswer
import tdt4250.qa.ExpressionAnswer
//import com.sun.org.apache.xalan.internal.xsltc.compiler.util.NumberType

class QaGenerator implements IGenerator {
	
	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
		val className = resource.URI.trimFileExtension.lastSegment.toFirstUpper
		val packageNameList = resource.URI.trimSegments(1).segmentsList.drop(3)
		val packageName = packageNameList.join(".")
		fsa.generateFile(packageNameList.join("/") + "/" + className + ".java", '''
			package «packageNameList.join(".")»;
			public class «className» implements Runnable {
				
				private tdt4250.io.AbstractIO io = new tdt4250.io.ConsoleIO();

				private int maxTries = 1;
				private  boolean revealAnswer = false;
				private boolean skip = false;
				private String nextQ = "";
				
				public void run() {
					«generate(resource.contents.get(0) as QATest)»
				}

				public static void main(String[] args) {
					new «className»().run();
				}
			}
		''') 
	}

	
	def dispatch CharSequence generate(QATest qa) {
		qa.parts.join("\n", [p | p.generate])
	}

	def dispatch CharSequence generate(QAPart qa) {
	}

	def dispatch CharSequence generate(QASection qs) {
		'''
		//Generate codes for a section
		{
		io.println("Here comes section: «qs.name»");
		«IF qs.options != null»
			maxTries = «qs.options.maxTries»;
			revealAnswer = «qs.options.revealAnswer»;
		«ELSE»
			maxTries = 1;
			revealAnswer = false;
		«ENDIF»
			«qs.questions.join("\n", [q | q.generate])»
		}'''
	}
	/*
	 * String input = io.inputString("Write your name: ");
		if (input.trim().equals("«qs.name»")){
			io.println(input);	
		}
	 */

	def dispatch CharSequence generate(Question q) {
		'''
		//Generate codes for a question
		    {
		    if (!skip || (skip && nextQ.equals("«q.name»"))){
		    	skip = false;
				boolean correct = false;
				int maxTriesCounter = 0;
				
				while(!correct && maxTriesCounter < maxTries){
					maxTriesCounter++;
					
					//checking for candidate answers
			        «IF q.candidates.length > 0»
			        	int count = 1;
			        	if(«q.correct instanceof OptionAnswer» && count == 1){
			        		io.println("«q.text»? - choose an option.");
			        	}else{
			        		io.println("«q.text»? - write the correct answer.");
			        	}
			        	«FOR candidate : q.candidates»
			        		«IF candidate instanceof TextAnswer»
			        			io.println("? " + count + ") «(candidate as TextAnswer).text»");
			        		«ELSEIF candidate instanceof NumberAnswer»
			        			io.println("? " + count + ") «(candidate as NumberAnswer).number» +- «(candidate as NumberAnswer).epsilon»");
			        		«ELSEIF candidate instanceof YesNoAnswer»
			        			io.println("? " + count + ") «(candidate as YesNoAnswer).yes»");
			        		«ELSEIF candidate instanceof OptionAnswer»
			        			io.println("? " + count + ") «(candidate as OptionAnswer).optionNumber»");
			        		«ELSEIF candidate instanceof ExpressionAnswer»
			        			io.println("? " + count + ") «(candidate as ExpressionAnswer).expression» +- «(candidate as ExpressionAnswer).epsilon»");
			        		«ENDIF»
			        		count++;
			        	«ENDFOR»
			        «ELSE»
			        	io.println("«q.text»? - write the correct answer.");
			        «ENDIF»
			        
			        //checking answers
			        «IF q.correct instanceof TextAnswer»
			        	String input = io.inputString("");
			        	
			        	if (input.toUpperCase().equals(("«(q.correct as TextAnswer).text»").toUpperCase())){
			        		io.println("Correct!");
			        		correct = true;
			        	}else{
			        		io.println("Wrong!");
			        		if(maxTriesCounter == maxTries && revealAnswer){
			        			io.println("Correct answer is: «(q.correct as TextAnswer).text»");
			        		}
			        	}
			        «ELSEIF (q.correct instanceof NumberAnswer) && !(q.correct instanceof ExpressionAnswer)»
			        	double input = io.inputDouble("");
			        	double answer = «(q.correct as NumberAnswer).number»;
			        	double epsilon = «(q.correct as NumberAnswer).epsilon»;
			        	
			        	if (input >= (answer - epsilon) && input <= (answer + epsilon)){
			        		io.println("Correct!");
			        		correct = true;
			        	}else{
			        		io.println("Wrong!");
			        		if(maxTriesCounter == maxTries && revealAnswer){
			        			io.println("Correct answer is: " + answer + " +- " + epsilon);
			        		}
			        	}
			       «ELSEIF q.correct instanceof OptionAnswer»	
			        	int input = io.inputInt("");
			        	
			        	if (input == «(q.correct as OptionAnswer).optionNumber»){
			        		io.println("Correct!");
			        		correct = true;
			        	}else{
			        		io.println("Wrong!");
			        		if(maxTriesCounter == maxTries && revealAnswer){
			        			io.println("Correct answer is: " + «(q.correct as OptionAnswer).optionNumber»);
			        		}
			        	}
			        «ELSEIF q.correct instanceof ExpressionAnswer»
			        	double input = io.inputDouble("");
			        	double answer = «(q.correct as ExpressionAnswer).expression»;
			        	double epsilon = «(q.correct as ExpressionAnswer).epsilon»;
			        	
			        	if (input >= (answer - epsilon) && input <= (answer + epsilon)){
			        		io.println("Correct!");
			        		correct = true;
			        	}else{
			        		io.println("Wrong!");
			        		if(maxTriesCounter == maxTries && revealAnswer){
			        			io.println("Correct answer is: " + answer + " +- " + epsilon);
			        		}
			        	}
			        «ELSEIF q.correct instanceof YesNoAnswer»	
			        	String input = io.inputString("");
			        	boolean correctAnswer = «(q.correct as YesNoAnswer).yes»;
			        	boolean answer = false;
			        	
			        	if(input.toUpperCase().equals("YES") && correctAnswer){
			        		answer = true;
			        	}else if(input.toUpperCase().equals("NO") && !correctAnswer){
			        		answer = false;
			        	}
			        	
			        	if (answer == correctAnswer){
			        		io.println("Correct!");
			        		correct = true;
			        	}else{
			        		io.println("Wrong!");
			        		if(maxTriesCounter == maxTries && revealAnswer){
			        			if(correctAnswer){
			        				io.println("Correct answer is: Yes");
			        			}else{
			        				io.println("Correct answer is: No");
			        			}
			        		}
			        	}
			        «ENDIF»
		        }
		        //skipping-control
		        
		        	if(correct){
		        	«IF q.nextRules != null»
		        	int lowestTries = Integer.MAX_VALUE;
		        		«FOR nextRule:q.nextRules»
		        		//search  for the nextRule with the lowest tries-value
		        			if(maxTriesCounter <= «nextRule.tries»){
		        				if(«nextRule.tries» < lowestTries){
		        					skip = true;
		        					lowestTries = «nextRule.tries»;
		        					nextQ = "«nextRule.next.name»";
		        					}
		        				}
		           		«ENDFOR»
		        	«ENDIF»
		        	}
		        }
		        
		        //repeat the following until a correct answer is given, or hit the maximum tries if there is.
		    	//1.print out the question,
		        //2.get user input 
		        //3.compare user input with the correct answer, and notify user correct or wrong answer
		    }
		    '''
	}
}